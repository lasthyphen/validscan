"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
const bintools_1 = __importDefault(require("src/utils/bintools"));
const api_1 = require("src/apis/health/api");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe('Health', () => {
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = 'https';
    const avalanche = new src_1.Avalanche(ip, port, protocol, 12345, undefined, undefined, true);
    let health;
    beforeAll(() => {
        health = new api_1.HealthAPI(avalanche);
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('getLiveness ', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = health.getLiveness();
        const payload = {
            result: {
                checks: {
                    'network.validators.heartbeat': {
                        message: {
                            heartbeat: 1591041377,
                        },
                        timestamp: '2020-06-01T15:56:18.554202-04:00',
                        duration: 23201,
                        contiguousFailures: 0,
                        timeOfFirstFailure: null,
                    },
                },
                healthy: true,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(payload.result);
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0cy9hcGlzL2hlYWx0aC9hcGkudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHNFQUF3QztBQUV4Qyw2QkFBZ0M7QUFDaEMsa0VBQTBDO0FBQzFDLDZDQUFnRDtBQUVoRDs7R0FFRztBQUNILE1BQU0sUUFBUSxHQUFHLGtCQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEMsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7SUFDdEIsTUFBTSxFQUFFLEdBQUcsV0FBVyxDQUFDO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFFekIsTUFBTSxTQUFTLEdBQUcsSUFBSSxlQUFTLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsSUFBSSxNQUFnQixDQUFDO0lBRXJCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixNQUFNLEdBQUcsSUFBSSxlQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IseUJBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBUyxFQUFFO1FBQzlCLE1BQU0sTUFBTSxHQUFtQixNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsTUFBTSxPQUFPLEdBQU87WUFDbEIsTUFBTSxFQUFFO2dCQUNOLE1BQU0sRUFBRTtvQkFDTiw4QkFBOEIsRUFBRTt3QkFDOUIsT0FBTyxFQUFFOzRCQUNQLFNBQVMsRUFBRSxVQUFVO3lCQUN0Qjt3QkFDRCxTQUFTLEVBQUUsa0NBQWtDO3dCQUM3QyxRQUFRLEVBQUUsS0FBSzt3QkFDZixrQkFBa0IsRUFBRSxDQUFDO3dCQUNyQixrQkFBa0IsRUFBRSxJQUFJO3FCQUN6QjtpQkFDRjtnQkFDRCxPQUFPLEVBQUUsSUFBSTthQUNkO1NBQ0YsQ0FBQztRQUNGLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLElBQUksRUFBRSxPQUFPO1NBQ2QsQ0FBQztRQUVGLHlCQUFTLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sUUFBUSxHQUFPLE1BQU0sTUFBTSxDQUFDO1FBRWxDLE1BQU0sQ0FBQyx5QkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2NrQXhpb3MgZnJvbSAnamVzdC1tb2NrLWF4aW9zJztcblxuaW1wb3J0IHsgQXZhbGFuY2hlIH0gZnJvbSAnc3JjJztcbmltcG9ydCBCaW5Ub29scyBmcm9tICdzcmMvdXRpbHMvYmludG9vbHMnO1xuaW1wb3J0IHsgSGVhbHRoQVBJIH0gZnJvbSAnc3JjL2FwaXMvaGVhbHRoL2FwaSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29scyA9IEJpblRvb2xzLmdldEluc3RhbmNlKCk7XG5cbmRlc2NyaWJlKCdIZWFsdGgnLCAoKSA9PiB7XG4gIGNvbnN0IGlwID0gJzEyNy4wLjAuMSc7XG4gIGNvbnN0IHBvcnQgPSA5NjUwO1xuICBjb25zdCBwcm90b2NvbCA9ICdodHRwcyc7XG5cbiAgY29uc3QgYXZhbGFuY2hlID0gbmV3IEF2YWxhbmNoZShpcCwgcG9ydCwgcHJvdG9jb2wsIDEyMzQ1LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIGxldCBoZWFsdGg6SGVhbHRoQVBJO1xuXG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgaGVhbHRoID0gbmV3IEhlYWx0aEFQSShhdmFsYW5jaGUpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIG1vY2tBeGlvcy5yZXNldCgpO1xuICB9KTtcblxuICB0ZXN0KCdnZXRMaXZlbmVzcyAnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0OlByb21pc2U8b2JqZWN0PiA9IGhlYWx0aC5nZXRMaXZlbmVzcygpO1xuICAgIGNvbnN0IHBheWxvYWQ6YW55ID0ge1xuICAgICAgcmVzdWx0OiB7XG4gICAgICAgIGNoZWNrczoge1xuICAgICAgICAgICduZXR3b3JrLnZhbGlkYXRvcnMuaGVhcnRiZWF0Jzoge1xuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICBoZWFydGJlYXQ6IDE1OTEwNDEzNzcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGltZXN0YW1wOiAnMjAyMC0wNi0wMVQxNTo1NjoxOC41NTQyMDItMDQ6MDAnLFxuICAgICAgICAgICAgZHVyYXRpb246IDIzMjAxLFxuICAgICAgICAgICAgY29udGlndW91c0ZhaWx1cmVzOiAwLFxuICAgICAgICAgICAgdGltZU9mRmlyc3RGYWlsdXJlOiBudWxsLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGhlYWx0aHk6IHRydWUsXG4gICAgICB9LFxuICAgIH07XG4gICAgY29uc3QgcmVzcG9uc2VPYmogPSB7XG4gICAgICBkYXRhOiBwYXlsb2FkLFxuICAgIH07XG5cbiAgICBtb2NrQXhpb3MubW9ja1Jlc3BvbnNlKHJlc3BvbnNlT2JqKTtcbiAgICBjb25zdCByZXNwb25zZTphbnkgPSBhd2FpdCByZXN1bHQ7XG5cbiAgICBleHBlY3QobW9ja0F4aW9zLnJlcXVlc3QpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QocmVzcG9uc2UpLnRvQmUocGF5bG9hZC5yZXN1bHQpO1xuICB9KTtcbn0pO1xuIl19