"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
const api_1 = require("src/apis/platformvm/api");
const buffer_1 = require("buffer/");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bech32 = __importStar(require("bech32"));
const constants_1 = require("src/utils/constants");
const utxos_1 = require("src/apis/platformvm/utxos");
const persistenceoptions_1 = require("src/utils/persistenceoptions");
const keychain_1 = require("src/apis/platformvm/keychain");
const outputs_1 = require("src/apis/platformvm/outputs");
const inputs_1 = require("src/apis/platformvm/inputs");
const utxos_2 = require("src/apis/platformvm/utxos");
const create_hash_1 = __importDefault(require("create-hash"));
const tx_1 = require("src/apis/platformvm/tx");
const helperfunctions_1 = require("src/utils/helperfunctions");
const payload_1 = require("src/utils/payload");
const helperfunctions_2 = require("src/utils/helperfunctions");
const constants_2 = require("src/utils/constants");
const serialization_1 = require("src/utils/serialization");
const outputs_2 = require("../../../src/apis/platformvm/outputs");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
const serializer = serialization_1.Serialization.getInstance();
const dumpSerailization = false;
function serialzeit(aThing, name) {
    if (dumpSerailization) {
        console.log(JSON.stringify(serializer.serialize(aThing, "platformvm", "hex", name + " -- Hex Encoded")));
        console.log(JSON.stringify(serializer.serialize(aThing, "platformvm", "display", name + " -- Human-Readable")));
    }
}
describe('PlatformVMAPI', () => {
    const networkid = 12345;
    const blockchainid = constants_1.PlatformChainID;
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = 'https';
    const nodeID = "NodeID-B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW";
    const startTime = helperfunctions_1.UnixNow().add(new bn_js_1.default(60 * 5));
    const endTime = startTime.add(new bn_js_1.default(1209600));
    const username = 'AvaLabs';
    const password = 'password';
    const avalanche = new src_1.Avalanche(ip, port, protocol, networkid, undefined, undefined, true);
    let api;
    let alias;
    const addrA = 'P-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW")));
    const addrB = 'P-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF")));
    const addrC = 'P-' + bech32.encode(avalanche.getHRP(), bech32.toWords(bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")));
    beforeAll(() => {
        api = new api_1.PlatformVMAPI(avalanche, '/ext/bc/P');
        alias = api.getBlockchainAlias();
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('refreshBlockchainID', () => __awaiter(void 0, void 0, void 0, function* () {
        let n3bcID = constants_1.Defaults.network[3].P["blockchainID"];
        let testAPI = new api_1.PlatformVMAPI(avalanche, '/ext/bc/P');
        let bc1 = testAPI.getBlockchainID();
        expect(bc1).toBe(constants_1.PlatformChainID);
        testAPI.refreshBlockchainID();
        let bc2 = testAPI.getBlockchainID();
        expect(bc2).toBe(constants_1.PlatformChainID);
        testAPI.refreshBlockchainID(n3bcID);
        let bc3 = testAPI.getBlockchainID();
        expect(bc3).toBe(n3bcID);
    }));
    test('listAddresses', () => __awaiter(void 0, void 0, void 0, function* () {
        const addresses = [addrA, addrB];
        const result = api.listAddresses(username, password);
        const payload = {
            result: {
                addresses,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(addresses);
    }));
    test('importKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = addrC;
        const result = api.importKey(username, password, 'key');
        const payload = {
            result: {
                address,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('getBalance', () => __awaiter(void 0, void 0, void 0, function* () {
        const balance = new bn_js_1.default('100', 10);
        const respobj = {
            balance,
            utxoIDs: [
                {
                    "txID": "LUriB3W919F84LwPMMw4sm2fZ4Y76Wgb6msaauEY7i1tFNmtv",
                    "outputIndex": 0
                }
            ]
        };
        const result = api.getBalance(addrA);
        const payload = {
            result: respobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(respobj));
    }));
    test('getCurrentSupply', () => __awaiter(void 0, void 0, void 0, function* () {
        const supply = new bn_js_1.default('1000000000000', 10);
        const result = api.getCurrentSupply();
        const payload = {
            result: {
                supply
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.toString(10)).toBe(supply.toString(10));
    }));
    test('getHeight', () => __awaiter(void 0, void 0, void 0, function* () {
        const height = new bn_js_1.default('100', 10);
        const result = api.getHeight();
        const payload = {
            result: {
                height
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.toString(10)).toBe(height.toString(10));
    }));
    test('getMinStake', () => __awaiter(void 0, void 0, void 0, function* () {
        const minStake = new bn_js_1.default("2000000000000", 10);
        const minDelegate = new bn_js_1.default("25000000000", 10);
        const result = api.getMinStake();
        const payload = {
            result: {
                minValidatorStake: "2000000000000",
                minDelegatorStake: "25000000000"
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response["minValidatorStake"].toString(10)).toBe(minStake.toString(10));
        expect(response["minDelegatorStake"].toString(10)).toBe(minDelegate.toString(10));
    }));
    test('getStake', () => __awaiter(void 0, void 0, void 0, function* () {
        const staked = new bn_js_1.default('100', 10);
        const result = api.getStake([addrA]);
        const payload = {
            result: {
                staked
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response)).toBe(JSON.stringify(staked));
    }));
    test('addSubnetValidator 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const nodeID = 'abcdef';
        const subnetID = "4R5p2RXDGLqaifZE4hHWH9owe34pfoBULn1DrQTWivjg8o4aH";
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const weight = 13;
        const utx = 'valid';
        const result = api.addSubnetValidator(username, password, nodeID, subnetID, startTime, endTime, weight);
        const payload = {
            result: {
                txID: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addSubnetValidator', () => __awaiter(void 0, void 0, void 0, function* () {
        const nodeID = 'abcdef';
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const weight = 13;
        const utx = 'valid';
        const result = api.addSubnetValidator(username, password, nodeID, subnetID, startTime, endTime, weight);
        const payload = {
            result: {
                txID: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addDelegator 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const nodeID = 'abcdef';
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const stakeAmount = new bn_js_1.default(13);
        const rewardAddress = 'fedcba';
        const utx = 'valid';
        const result = api.addDelegator(username, password, nodeID, startTime, endTime, stakeAmount, rewardAddress);
        const payload = {
            result: {
                txID: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('getBlockchains 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const resp = [{
                id: 'nodeID',
                subnetID: 'subnetID',
                vmID: 'vmID',
            }];
        const result = api.getBlockchains();
        const payload = {
            result: {
                blockchains: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('getSubnets 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const resp = [{
                id: 'id',
                controlKeys: ['controlKeys'],
                threshold: 'threshold',
            }];
        const result = api.getSubnets();
        const payload = {
            result: {
                subnets: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toEqual(resp);
    }));
    test('getCurrentValidators 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const validators = ['val1', 'val2'];
        const result = api.getCurrentValidators();
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual({ validators });
    }));
    test('getCurrentValidators 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'abcdef';
        const validators = ['val1', 'val2'];
        const result = api.getCurrentValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual({ validators });
    }));
    test('getCurrentValidators 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const validators = ['val1', 'val2'];
        const result = api.getCurrentValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toStrictEqual({ validators });
    }));
    test('exportKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const key = 'sdfglvlj2h3v45';
        const result = api.exportKey(username, password, addrA);
        const payload = {
            result: {
                privateKey: key,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(key);
    }));
    test("exportAVAX", () => __awaiter(void 0, void 0, void 0, function* () {
        let amount = new bn_js_1.default(100);
        let to = "abcdef";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.exportAVAX(username, password, amount, to);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test("importAVAX", () => __awaiter(void 0, void 0, void 0, function* () {
        let to = "abcdef";
        let username = "Robert";
        let password = "Paulson";
        let txID = "valid";
        let result = api.importAVAX(username, password, to, blockchainid);
        let payload = {
            "result": {
                "txID": txID
            }
        };
        let responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test('createBlockchain', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const vmID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const name = 'Some Blockchain';
        const genesis = '{ruh:"roh"}';
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const result = api.createBlockchain(username, password, subnetID, vmID, [1, 2, 3], name, genesis);
        const payload = {
            result: {
                txID: blockchainID,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(blockchainID);
    }));
    test('getBlockchainStatus', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const result = api.getBlockchainStatus(blockchainID);
        const payload = {
            result: {
                status: 'Accepted',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('Accepted');
    }));
    test('createAddress', () => __awaiter(void 0, void 0, void 0, function* () {
        const alias = 'randomalias';
        const result = api.createAddress(username, password);
        const payload = {
            result: {
                address: alias,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(alias);
    }));
    test('createSubnet 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const controlKeys = ['abcdef'];
        const threshold = 13;
        const utx = 'valid';
        const result = api.createSubnet(username, password, controlKeys, threshold);
        const payload = {
            result: {
                txID: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('sampleValidators 1', () => __awaiter(void 0, void 0, void 0, function* () {
        let subnetID;
        const validators = ['val1', 'val2'];
        const result = api.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('sampleValidators 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'abcdef';
        const validators = ['val1', 'val2'];
        const result = api.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('sampleValidators 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const validators = ['val1', 'val2'];
        const result = api.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
    }));
    test('validatedBy 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = 'abcdef';
        const resp = 'valid';
        const result = api.validatedBy(blockchainID);
        const payload = {
            result: {
                subnetID: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 1', () => __awaiter(void 0, void 0, void 0, function* () {
        let subnetID;
        const resp = ['valid'];
        const result = api.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'deadbeef';
        const resp = ['valid'];
        const result = api.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const resp = ['valid'];
        const result = api.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('getTx', () => __awaiter(void 0, void 0, void 0, function* () {
        const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
        const result = api.getTx(txid);
        const payload = {
            result: {
                tx: 'sometx',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('sometx');
    }));
    test('getTxStatus', () => __awaiter(void 0, void 0, void 0, function* () {
        const txid = 'f966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7';
        const result = api.getTxStatus(txid);
        const payload = {
            result: 'accepted'
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('accepted');
    }));
    test('getUTXOs', () => __awaiter(void 0, void 0, void 0, function* () {
        // Payment
        const OPUTXOstr1 = bintools.cb58Encode(buffer_1.Buffer.from('000038d1b9f1138672da6fb6c35125539276a9acc2a668d63bea6ba3c795e2edb0f5000000013e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd3558000000070000000000004dd500000000000000000000000100000001a36fd0c2dbcab311731dde7ef1514bd26fcdc74d', 'hex'));
        const OPUTXOstr2 = bintools.cb58Encode(buffer_1.Buffer.from('0000c3e4823571587fe2bdfc502689f5a8238b9d0ea7f3277124d16af9de0d2d9911000000003e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd355800000007000000000000001900000000000000000000000100000001e1b6b6a4bad94d2e3f20730379b9bcd6f176318e', 'hex'));
        const OPUTXOstr3 = bintools.cb58Encode(buffer_1.Buffer.from('0000f29dba61fda8d57a911e7f8810f935bde810d3f8d495404685bdb8d9d8545e86000000003e07e38e2f23121be8756412c18db7246a16d26ee9936f3cba28be149cfd355800000007000000000000001900000000000000000000000100000001e1b6b6a4bad94d2e3f20730379b9bcd6f176318e', 'hex'));
        const set = new utxos_1.UTXOSet();
        set.add(OPUTXOstr1);
        set.addArray([OPUTXOstr2, OPUTXOstr3]);
        const persistOpts = new persistenceoptions_1.PersistanceOptions('test', true, 'union');
        expect(persistOpts.getMergeRule()).toBe('union');
        let addresses = set.getAddresses().map((a) => api.addressFromBuffer(a));
        let result = api.getUTXOs(addresses, api.getBlockchainID(), 0, 1, persistOpts);
        const payload = {
            result: {
                utxos: [OPUTXOstr1, OPUTXOstr2, OPUTXOstr3],
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        let response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(JSON.stringify(response.getAllUTXOStrings().sort())).toBe(JSON.stringify(set.getAllUTXOStrings().sort()));
        addresses = set.getAddresses().map((a) => api.addressFromBuffer(a));
        result = api.getUTXOs(addresses, api.getBlockchainID(), 0, 0, persistOpts);
        jest_mock_axios_1.default.mockResponse(responseObj);
        response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(2);
        expect(JSON.stringify(response.getAllUTXOStrings().sort())).toBe(JSON.stringify(set.getAllUTXOStrings().sort()));
    }));
    describe('Transactions', () => {
        let set;
        let lset;
        let keymgr2;
        let keymgr3;
        let addrs1;
        let addrs2;
        let addrs3;
        let addressbuffs = [];
        let addresses = [];
        let utxos;
        let lutxos;
        let inputs;
        let outputs;
        const amnt = 10000;
        const assetID = buffer_1.Buffer.from(create_hash_1.default('sha256').update('mary had a little lamb').digest());
        const NFTassetID = buffer_1.Buffer.from(create_hash_1.default('sha256').update("I can't stand it, I know you planned it, I'mma set straight this Watergate.'").digest());
        let secpbase1;
        let secpbase2;
        let secpbase3;
        let fungutxoids = [];
        let platformvm;
        const fee = 10;
        const name = 'Mortycoin is the dumb as a sack of hammers.';
        const symbol = 'morT';
        const denomination = 8;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            platformvm = new api_1.PlatformVMAPI(avalanche, "/ext/bc/P");
            const result = platformvm.getAVAXAssetID();
            const payload = {
                result: {
                    name,
                    symbol,
                    assetID: bintools.cb58Encode(assetID),
                    denomination: `${denomination}`,
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            yield result;
            set = new utxos_1.UTXOSet();
            lset = new utxos_1.UTXOSet;
            platformvm.newKeyChain();
            keymgr2 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
            keymgr3 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
            addrs1 = [];
            addrs2 = [];
            addrs3 = [];
            utxos = [];
            lutxos = [];
            inputs = [];
            outputs = [];
            fungutxoids = [];
            const pload = buffer_1.Buffer.alloc(1024);
            pload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, 'utf8');
            for (let i = 0; i < 3; i++) {
                addrs1.push(platformvm.addressFromBuffer(platformvm.keyChain().makeKey().getAddress()));
                addrs2.push(platformvm.addressFromBuffer(keymgr2.makeKey().getAddress()));
                addrs3.push(platformvm.addressFromBuffer(keymgr3.makeKey().getAddress()));
            }
            const amount = constants_2.ONEAVAX.mul(new bn_js_1.default(amnt));
            addressbuffs = platformvm.keyChain().getAddresses();
            addresses = addressbuffs.map((a) => platformvm.addressFromBuffer(a));
            const locktime = new bn_js_1.default(54321);
            const threshold = 3;
            for (let i = 0; i < 5; i++) {
                let txid = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32)).digest());
                let txidx = buffer_1.Buffer.alloc(4);
                txidx.writeUInt32BE(i, 0);
                const out = new outputs_1.SECPTransferOutput(amount, addressbuffs, locktime, threshold);
                const xferout = new outputs_1.TransferableOutput(assetID, out);
                outputs.push(xferout);
                const u = new utxos_2.UTXO();
                u.fromBuffer(buffer_1.Buffer.concat([u.getCodecIDBuffer(), txid, txidx, xferout.toBuffer()]));
                fungutxoids.push(u.getUTXOID());
                utxos.push(u);
                txid = u.getTxID();
                txidx = u.getOutputIdx();
                const asset = u.getAssetID();
                const input = new inputs_1.SECPTransferInput(amount);
                const xferinput = new inputs_1.TransferableInput(txid, txidx, asset, input);
                inputs.push(xferinput);
            }
            set.addArray(utxos);
            for (let i = 0; i < 4; i++) {
                let txid = buffer_1.Buffer.from(create_hash_1.default('sha256').update(bintools.fromBNToBuffer(new bn_js_1.default(i), 32)).digest());
                let txidx = buffer_1.Buffer.alloc(4);
                txidx.writeUInt32BE(i, 0);
                const out = new outputs_1.SECPTransferOutput(constants_2.ONEAVAX.mul(new bn_js_1.default(5)), addressbuffs, locktime, 1);
                const pout = new outputs_2.ParseableOutput(out);
                const lockout = new outputs_2.StakeableLockOut(constants_2.ONEAVAX.mul(new bn_js_1.default(5)), addressbuffs, locktime, 1, locktime.add(new bn_js_1.default(86400)), pout);
                const xferout = new outputs_1.TransferableOutput(assetID, lockout);
                const u = new utxos_2.UTXO();
                u.fromBuffer(buffer_1.Buffer.concat([u.getCodecIDBuffer(), txid, txidx, xferout.toBuffer()]));
                lutxos.push(u);
            }
            lset.addArray(lutxos);
            lset.addArray(set.getAllUTXOs());
            secpbase1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(777), addrs3.map((a) => platformvm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
            secpbase2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(888), addrs2.map((a) => platformvm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
            secpbase3 = new outputs_1.SECPTransferOutput(new bn_js_1.default(999), addrs2.map((a) => platformvm.parseAddress(a)), helperfunctions_1.UnixNow(), 1);
        }));
        test('signTx', () => __awaiter(void 0, void 0, void 0, function* () {
            const assetID = yield platformvm.getAVAXAssetID();
            const txu2 = set.buildBaseTx(networkid, bintools.cb58Decode(blockchainid), new bn_js_1.default(amnt), assetID, addrs3.map((a) => platformvm.parseAddress(a)), addrs1.map((a) => platformvm.parseAddress(a)), addrs1.map((a) => platformvm.parseAddress(a)), platformvm.getTxFee(), assetID, undefined, helperfunctions_1.UnixNow(), new bn_js_1.default(0), 1);
            const tx2 = txu2.sign(platformvm.keyChain());
        }));
        test('buildImportTx', () => __awaiter(void 0, void 0, void 0, function* () {
            let locktime = new bn_js_1.default(0);
            let threshold = 1;
            platformvm.setTxFee(new bn_js_1.default(fee));
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const fungutxo = set.getUTXO(fungutxoids[1]);
            const fungutxostr = fungutxo.toString();
            const result = platformvm.buildImportTx(set, addrs1, constants_1.PlatformChainID, addrs3, addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow(), locktime, threshold);
            const payload = {
                result: {
                    utxos: [fungutxostr]
                },
            };
            const responseObj = {
                data: payload,
            };
            jest_mock_axios_1.default.mockResponse(responseObj);
            const txu1 = yield result;
            const txu2 = set.buildImportTx(networkid, bintools.cb58Decode(blockchainid), addrbuff3, addrbuff1, addrbuff2, [fungutxo], bintools.cb58Decode(constants_1.PlatformChainID), platformvm.getTxFee(), yield platformvm.getAVAXAssetID(), new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow(), locktime, threshold);
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "ImportTx");
        }));
        test('buildExportTx', () => __awaiter(void 0, void 0, void 0, function* () {
            platformvm.setTxFee(new bn_js_1.default(fee));
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const amount = new bn_js_1.default(90);
            const txu1 = yield platformvm.buildExportTx(set, amount, bintools.cb58Decode(constants_1.Defaults.network[avalanche.getNetworkID()].X["blockchainID"]), addrbuff3.map((a) => bintools.addressToString(avalanche.getHRP(), "P", a)), addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = set.buildExportTx(networkid, bintools.cb58Decode(blockchainid), amount, assetID, addrbuff3, addrbuff1, addrbuff2, bintools.cb58Decode(constants_1.Defaults.network[avalanche.getNetworkID()].X["blockchainID"]), platformvm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            const txu3 = yield platformvm.buildExportTx(set, amount, bintools.cb58Decode(constants_1.Defaults.network[avalanche.getNetworkID()].X["blockchainID"]), addrs3, addrs1, addrs2, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu4 = set.buildExportTx(networkid, bintools.cb58Decode(blockchainid), amount, assetID, addrbuff3, addrbuff1, addrbuff2, undefined, platformvm.getTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu4.toBuffer().toString('hex')).toBe(txu3.toBuffer().toString('hex'));
            expect(txu4.toString()).toBe(txu3.toString());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "ExportTx");
        }));
        /*
            test('buildAddSubnetValidatorTx', async () => {
              platformvm.setFee(new BN(fee));
              const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
              const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
              const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
              const amount:BN = new BN(90);
        
              const txu1:UnsignedTx = await platformvm.buildAddSubnetValidatorTx(
                set,
                addrs1,
                addrs2,
                nodeID,
                startTime,
                endTime,
                PlatformVMConstants.MINSTAKE,
                new UTF8Payload("hello world"), UnixNow()
              );
        
              const txu2:UnsignedTx = set.buildAddSubnetValidatorTx(
                networkid, bintools.cb58Decode(blockchainid),
                addrbuff1,
                addrbuff2,
                NodeIDStringToBuffer(nodeID),
                startTime,
                endTime,
                PlatformVMConstants.MINSTAKE,
                platformvm.getFee(),
                assetID,
                new UTF8Payload("hello world").getPayload(), UnixNow()
              );
              expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
              expect(txu2.toString()).toBe(txu1.toString());
        
            });
        */
        test('buildAddDelegatorTx 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const amount = constants_1.Defaults.network[networkid]["P"].minDelegationStake;
            const locktime = new bn_js_1.default(54321);
            const threshold = 2;
            platformvm.setMinStake(constants_1.Defaults.network[networkid]["P"].minStake, constants_1.Defaults.network[networkid]["P"].minDelegationStake);
            const txu1 = yield platformvm.buildAddDelegatorTx(set, addrs3, addrs1, addrs2, nodeID, startTime, endTime, amount, addrs3, locktime, threshold, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = set.buildAddDelegatorTx(networkid, bintools.cb58Decode(blockchainid), assetID, addrbuff3, addrbuff1, addrbuff2, helperfunctions_2.NodeIDStringToBuffer(nodeID), startTime, endTime, amount, locktime, threshold, addrbuff3, new bn_js_1.default(0), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "AddDelegatorTx");
        }));
        test('buildAddValidatorTx 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const amount = constants_1.Defaults.network[networkid]["P"].minStake.add(new bn_js_1.default(fee));
            const locktime = new bn_js_1.default(54321);
            const threshold = 2;
            platformvm.setMinStake(constants_1.Defaults.network[networkid]["P"].minStake, constants_1.Defaults.network[networkid]["P"].minDelegationStake);
            const txu1 = yield platformvm.buildAddValidatorTx(set, addrs3, addrs1, addrs2, nodeID, startTime, endTime, amount, addrs3, 0.1334556, locktime, threshold, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = set.buildAddValidatorTx(networkid, bintools.cb58Decode(blockchainid), assetID, addrbuff3, addrbuff1, addrbuff2, helperfunctions_2.NodeIDStringToBuffer(nodeID), startTime, endTime, amount, locktime, threshold, addrbuff3, 0.1335, new bn_js_1.default(0), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "AddValidatorTx");
        }));
        test('buildAddDelegatorTx 2', () => __awaiter(void 0, void 0, void 0, function* () {
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const amount = constants_1.Defaults.network[networkid]["P"].minDelegationStake;
            const locktime = new bn_js_1.default(54321);
            const threshold = 2;
            platformvm.setMinStake(constants_1.Defaults.network[networkid]["P"].minStake, constants_1.Defaults.network[networkid]["P"].minDelegationStake);
            const txu1 = yield platformvm.buildAddDelegatorTx(lset, addrs3, addrs1, addrs2, nodeID, startTime, endTime, amount, addrs3, locktime, threshold, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = lset.buildAddDelegatorTx(networkid, bintools.cb58Decode(blockchainid), assetID, addrbuff3, addrbuff1, addrbuff2, helperfunctions_2.NodeIDStringToBuffer(nodeID), startTime, endTime, amount, locktime, threshold, addrbuff3, new bn_js_1.default(0), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "AddDelegatorTx");
        }));
        test('buildAddValidatorTx 2', () => __awaiter(void 0, void 0, void 0, function* () {
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const amount = constants_2.ONEAVAX.mul(new bn_js_1.default(25));
            const locktime = new bn_js_1.default(54321);
            const threshold = 2;
            platformvm.setMinStake(constants_2.ONEAVAX.mul(new bn_js_1.default(25)), constants_2.ONEAVAX.mul(new bn_js_1.default(25)));
            const txu1 = yield platformvm.buildAddValidatorTx(lset, addrs3, addrs1, addrs2, nodeID, startTime, endTime, amount, addrs3, 0.1334556, locktime, threshold, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = lset.buildAddValidatorTx(networkid, bintools.cb58Decode(blockchainid), assetID, addrbuff3, addrbuff1, addrbuff2, helperfunctions_2.NodeIDStringToBuffer(nodeID), startTime, endTime, amount, locktime, threshold, addrbuff3, 0.1335, new bn_js_1.default(0), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "AddValidatorTx");
        }));
        test('buildCreateSubnetTx1', () => __awaiter(void 0, void 0, void 0, function* () {
            platformvm.setCreationTxFee(new bn_js_1.default(10));
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const txu1 = yield platformvm.buildCreateSubnetTx(set, addrs1, addrs2, addrs3, 1, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = set.buildCreateSubnetTx(networkid, bintools.cb58Decode(blockchainid), addrbuff1, addrbuff2, addrbuff3, 1, platformvm.getCreationTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
            let tx1 = txu1.sign(platformvm.keyChain());
            let checkTx = tx1.toBuffer().toString("hex");
            let tx1obj = tx1.serialize("hex");
            let tx1str = JSON.stringify(tx1obj);
            /*
            console.log("-----Test1 JSON-----");
            console.log(tx1str);
            console.log("-----Test1 ENDN-----");
            */
            let tx2newobj = JSON.parse(tx1str);
            let tx2 = new tx_1.Tx();
            tx2.deserialize(tx2newobj, "hex");
            /*
            let tx2obj:object = tx2.serialize("hex");
            let tx2str:string = JSON.stringify(tx2obj);
            console.log("-----Test2 JSON-----");
            console.log(tx2str);
            console.log("-----Test2 ENDN-----");
            */
            expect(tx2.toBuffer().toString("hex")).toBe(checkTx);
            let tx3 = txu1.sign(platformvm.keyChain());
            let tx3obj = tx3.serialize("display");
            let tx3str = JSON.stringify(tx3obj);
            /*
            console.log("-----Test3 JSON-----");
            console.log(tx3str);
            console.log("-----Test3 ENDN-----");
            */
            let tx4newobj = JSON.parse(tx3str);
            let tx4 = new tx_1.Tx();
            tx4.deserialize(tx4newobj, "display");
            /*
            let tx4obj:object = tx4.serialize("display");
            let tx4str:string = JSON.stringify(tx4obj);
            console.log("-----Test4 JSON-----");
            console.log(tx4str);
            console.log("-----Test4 ENDN-----");
            */
            expect(tx4.toBuffer().toString("hex")).toBe(checkTx);
            serialzeit(tx1, "CreateSubnetTx");
        }));
        test('buildCreateSubnetTx 2', () => __awaiter(void 0, void 0, void 0, function* () {
            platformvm.setCreationTxFee(new bn_js_1.default(10));
            const addrbuff1 = addrs1.map((a) => platformvm.parseAddress(a));
            const addrbuff2 = addrs2.map((a) => platformvm.parseAddress(a));
            const addrbuff3 = addrs3.map((a) => platformvm.parseAddress(a));
            const txu1 = yield platformvm.buildCreateSubnetTx(lset, addrs1, addrs2, addrs3, 1, new payload_1.UTF8Payload("hello world"), helperfunctions_1.UnixNow());
            const txu2 = lset.buildCreateSubnetTx(networkid, bintools.cb58Decode(blockchainid), addrbuff1, addrbuff2, addrbuff3, 1, platformvm.getCreationTxFee(), assetID, new payload_1.UTF8Payload("hello world").getPayload(), helperfunctions_1.UnixNow());
            expect(txu2.toBuffer().toString('hex')).toBe(txu1.toBuffer().toString('hex'));
            expect(txu2.toString()).toBe(txu1.toString());
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,